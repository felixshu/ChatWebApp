/** * Created by felixshu on 2/11/14. */var socketIo = require('socket.io');var io;var guestNumber = 1;var nickNames = {};var namesUsed = {};var currentRoom = {};exports.listen = function(server){    io = socketIo.listen(server);    io.set('log level',1);    io.socket.on('connection',function(socket){        //Assign user a guest name when they connect        guestNumber = assignGuestName(socket,guestNumber, nickName,namesUsed);        // Place user in Lobby when they connect        joinRoom(socket,'Lobby');        messageBroadcasting(socket,nickNames);        NameChanges(socket,nickNames,namesUsed);        createRoom(socket);        //providing user with list of occupied rooms on request        socket.on('rooms', function(){            socket.emit('rooms', io.sockets.manager.rooms);        });        //cleanup logic when user disconnects        Disconnection(socket,nickNames,namesUsed);    })};function assignGuestName(socket,guestNumber,nickNames,namesUsed){    var name = 'Guest'+guestNumber;    nickNames[socket.id] = name;    socket.emit('nameResult',{        success:true,        name:name    });    namesUsed.push(name);    return guestNumber+1;}function joinRoom(socket,room){    socket.join(room);    currentRoom[socket.id] = room;    socket.emit('joinResult', {room:room});    socket.broadcast.to(room).emit('message',{text:nickNames[socket.id]+'has joined'+room+'.'});    /*    * read a user lists in the room, if other users exist, summarize who they are    *    * */    var usersInRoom = io.sockets.clients(room);    if(usersInRoom.length > 1){        var usersInRoomSummary = 'Users currently in'+room+': ';        for(var index in usersInRoom){            var userSockedId = usersInRoom[index].id;            if(userSockedId != socket.id)            {                if (index > 0){                    usersInRoomSummary += ', ';                }                usersInRoomSummary += nickName[socket.id];            }        }        usersInRoomSummary += '.';        socket.emit('message',{text:usersInRoomSummary});    }}function messageBroadcasting(socket, nickNames){    socket.on('message',function(message){        socket.broadcast.to(message.room).emit('message',{            text:nickNames[socket.id]+': '+message.text        });    });}function NameChanges (socket, nickNames, namesUsed){    socket.on('nameAttempt',function(name){        if(name.indexOf('Guest')==0){            socket.emit('nameResult',{                success:false,                message:'Names cannot begin with "Guest".'            });        }        else{            if(namesUsed.indexOf(name) == -1){                var previousName = nickNames[socket.id];                var previousNameIndex = namesUsed.indexOf(previousName);                namesUsed.push(name);                nickNames[socket.id] = name;                delete namesUsed[previousNameIndex];                socket.emit('nameResult', {                    success:true,                    name:name                });                socket.broadcast.to(currentRoom[socket.id]).emit('message',{                    text:previousName + ' is now changed to '+name+'.'                });            }            else{                socket.emit('nameResult',{                    success:false,                    message:'This name is already in use.'                });            }        }    })}function createRoom (socket){    socket.on('join',function(room){        socket.leave(currentRoom[socket.id]);        joinRoom(socket,room.newRoom);    })}function Disconnection(socket){    socket.on('disconnect',function(){        var nameIndex =namesUsed.indexOf(nickNames[socket.id]);        delete namesUsed[nameIndex];        delete nickNames[socket.id];    });}